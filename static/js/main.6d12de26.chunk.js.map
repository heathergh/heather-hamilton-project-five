{"version":3,"sources":["components/Header.js","components/ImageCard.js","components/DownloadLink.js","components/ImageList.js","components/Searchbar.js","components/Loading.js","components/ErrorMessage.js","components/Main.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","props","ImageCard","id","url","alt","name","profileUrl","className","src","tabIndex","href","target","rel","DownloadLink","downloadUrl","download","ImageList","searchResults","map","image","index","key","urls","small","alt_description","postUrl","links","html","user","Searchbar","updateParentImages","imagesArray","renderImages","searchForImages","event","preventDefault","state","searchTerm","errorState","toggleLoader","axios","method","headers","Authorization","params","query","per_page","numOfResults","then","response","getPages","data","total_pages","noResults","getImages","results","catch","error","console","getUserInput","value","setState","getSearchTerm","onSubmit","this","htmlFor","onChange","placeholder","Component","Loading","ErrorMessage","children","Main","unsplashImages","images","getMoreImages","newImages","updateImages","currentImages","pageCount","setSearchTerm","userInput","booleanVal","isLoading","setTotalPages","totalPages","pages","setErrorStates","message","errorMessage","fetchMoreImages","window","innerHeight","scrollY","document","body","offsetHeight","page","perPage","addEventListener","debounce","removeEventListener","noResultsState","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6d12de26.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = props => {\n    return (\n        <header>\n            <h1>Image Search</h1>\n            <p>Search for an image in the input below. Download your favourite ones or visit the original page. Made the with the Unsplash API.</p>\n        </header>\n    )\n}\n\nexport default Header;","import React from 'react';\n\nconst ImageCard = ({id, url, alt, name, profileUrl}) => {\n    return (\n        <div className=\"card-wrapper\">\n            <img src={`${url}`} alt={`${alt}`} id={id} tabIndex=\"0\"/>\n            <p className=\"photo-credit\"><a href={`${profileUrl}`} target=\"_blank\" rel=\"noopener noreferrer\">{name}</a></p>\n        </div>\n    )\n}\n\nexport default ImageCard;","import React from 'react';\n\nconst DownloadLink = ({downloadUrl}) => {\n    return (\n        <a className=\"download-link\" download href={`${downloadUrl}?force=true`}>Download Original Image</a>\n    )\n}\n\nexport default DownloadLink;","import React from 'react';\nimport ImageCard from './ImageCard';\nimport DownloadLink from './DownloadLink';\n\nconst ImageList = props => {\n    return (\n        <ul>\n            {props.searchResults.map((image, index) => {\n                return (\n                    <li key={index}>\n                        <ImageCard\n                            id={image.id}\n                            url={image.urls.small}\n                            alt={image.alt_description}\n                            postUrl={image.links.html}\n                            name={image.user.name}\n                            profileUrl={image.user.links.html}\n                        />\n                        <DownloadLink downloadUrl={image.links.download}/>\n                    </li>\n                )\n            })}\n        </ul>\n    )\n}\n\nexport default ImageList;","import React, { Component } from 'react';\nimport axios from 'axios';\n\nclass Searchbar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // query state for API call\n            searchTerm: ''\n        }\n    }\n\n    updateParentImages = imagesArray => {\n        this.props.renderImages();\n    }\n\n    searchForImages = event => {\n        // this method is an onSubmit event handler, so must prevent default of page refresh\n        event.preventDefault();\n\n        /**  check user input isn't an empty string\n        if it's an empty string, set the error message state in parent\n        to show to user */\n        if (this.state.searchTerm === '') {\n            this.props.errorState(\"Please fill in this field\");\n        } else {\n            //toggle loading animation in parent component while API call is happening\n            this.props.toggleLoader(true);\n\n            axios({\n                method: 'get',\n                url: 'https://api.unsplash.com//search/photos',\n                headers: {\n                    Authorization: 'Client-ID c7e460e950c6ce50f9be85a30ccb19fb6ae9997faeea7dade15fdb1f30b331a8',\n                },\n                params: {\n                    query: this.state.searchTerm,\n                    per_page: this.props.numOfResults\n                }\n            }).then(response => {\n                this.props.getPages(response.data.total_pages);\n\n                // set the total number of pages\n                if (!this.props.noResults) {\n                    this.props.getImages(response.data.results)\n                }\n                \n                //toggle loading animation after state has been set in parent component\n                this.props.toggleLoader(false);\n            }).catch(error => {\n                console.error(`Something went wrong: ${error}`);\n            });\n        }\n    }\n    \n    // get the user input\n    getUserInput = (event) => {\n        event.preventDefault(); \n\n        // set state for query to use in API call\n        if (event.target.value !== '') {\n            this.setState({\n                searchTerm: event.target.value\n            }, () => {\n                this.props.getSearchTerm(this.state.searchTerm);\n            })\n        }\n    }\n\n    render() {\n        return (\n            <form className=\"form-wrapper\" onSubmit={this.searchForImages}>\n                <label htmlFor=\"search\" className=\"visuallyHidden\">What images do you want to search for?</label>\n                <input id=\"search\" onChange={this.getUserInput} placeholder=\"Search for an image\"/>\n            </form>\n        )\n    }\n}\n\nexport default Searchbar;","import React, { Fragment } from 'react';\n\nconst Loading = () => {\n    return(\n        // Loading animations from LOADING.IO\n        <Fragment>\n            <div className=\"lds-ellipsis\">\n                <div></div>\n                <div></div>\n                <div></div>\n                <div></div>\n            </div>\n        </Fragment>\n    )\n}\n\nexport default Loading;","import React from 'react';\n\nconst ErrorMessage = props => {\n    return (\n        <div className=\"error\">\n            <h2>\n                {props.children}\n            </h2>\n        </div>\n    )\n}\nexport default ErrorMessage;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport debounce from 'lodash/debounce';\nimport ImageList from './ImageList';\nimport Searchbar from './Searchbar';\nimport Loading from './Loading';\nimport ErrorMessage from './ErrorMessage';\n\nclass Main extends Component {\n    constructor() {\n        super();\n        this.state = {\n            images: [],\n            newImages: [],\n            searchTerm: '',\n            isLoading: false,\n            pageCount: 2,\n            pages: 0,\n            perPage: 20,\n            noResults: false,\n            errorMessage: ''\n        }\n    }\n\n    componentDidMount() {\n        window.addEventListener('scroll', debounce(this.fetchMoreImages, 150), true);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('scroll', this.fetchMoreImages, true);\n    }\n\n    getImages = unsplashImages => {\n        this.setState({\n            images: unsplashImages\n        })\n    }\n\n    getMoreImages = unsplashImages => {\n        this.setState({\n            newImages: unsplashImages\n        })\n    }\n\n    updateImages = () => {\n        const currentImages = [...this.state.images];\n        const newImages = [...this.state.newImages]\n\n        this.setState({\n            images: [...currentImages, ...newImages],\n            pageCount: this.state.pageCount + 1\n        })\n    }\n\n    setSearchTerm = userInput => {\n        this.setState({\n            searchTerm: userInput\n        })\n    }\n\n    toggleLoader = booleanVal => {\n        this.setState({\n            isLoading: booleanVal\n        })\n    }\n\n    setTotalPages = totalPages => {\n        this.setState({\n            pages: totalPages\n        })\n    }\n\n    setErrorStates = message => {\n        this.setState({\n            noResults: true,\n            errorMessage: message\n        })\n    }\n\n    fetchMoreImages = () => {\n        if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight) {\n            axios({\n                method: 'get',\n                url: 'https://api.unsplash.com//search/photos',\n                headers: {\n                    Authorization: 'Client-ID c7e460e950c6ce50f9be85a30ccb19fb6ae9997faeea7dade15fdb1f30b331a8',\n                },\n                params: {\n                    query: this.state.searchTerm,\n                    page: this.state.pageCount,\n                    per_page: this.state.perPage,\n                }\n            }).then(response => {\n                this.setState({\n                    newImages: response.data.results\n                }, () => {\n                    if (this.state.pageCount < this.state.pages) {\n                        this.updateImages();\n                    }\n                });\n            }).catch((error) => {\n                console.error(`Something went wrong: ${error}`);\n            });\n        }\n    }\n\n    render() {\n        return(\n        <main className=\"wrapper\">\n            <Searchbar\n                getImages={this.getImages}\n                getSearchTerm={this.setSearchTerm}\n                toggleLoader={this.toggleLoader}\n                getPages={this.setTotalPages}\n                numOfResults={this.state.perPage}\n                noResultsState={this.state.noResults}\n                errorState={this.setErrorStates}\n            />\n            <section className=\"image-list-wrapper\" >\n                {\n                this.state.isLoading\n                ?\n                    <Loading />\n                :\n                    <ImageList searchResults={this.state.images} />\n                }\n                \n                {\n                    this.state.errorMessage !== ''\n                ?\n                    <ErrorMessage>{this.state.errorMessage}</ErrorMessage>\n                :\n                    null\n                }\n            </section>\n        </main>\n        )\n    }\n}\n\nexport default Main;","import React, { Fragment } from 'react';\nimport '../styles/App.css';\nimport Header from './Header';\nimport Main from './Main';\n\nconst App = () => {\n    return (\n        <Fragment>\n            <Header />\n            <Main />\n        </Fragment>\n    )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}